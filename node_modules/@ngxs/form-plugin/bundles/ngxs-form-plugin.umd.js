(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/form-plugin', ['exports', '@angular/core', '@ngxs/store', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs["form-plugin"] = {}), global.ng.core, global["ngxs-store"], global.ng.forms, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i1, i2, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var UpdateFormStatus = /** @class */ (function () {
        function UpdateFormStatus(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormStatus, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Status';
            },
            enumerable: false,
            configurable: true
        });
        return UpdateFormStatus;
    }());
    var UpdateFormValue = /** @class */ (function () {
        function UpdateFormValue(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormValue, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Value';
            },
            enumerable: false,
            configurable: true
        });
        return UpdateFormValue;
    }());
    var UpdateForm = /** @class */ (function () {
        function UpdateForm(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateForm, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form';
            },
            enumerable: false,
            configurable: true
        });
        return UpdateForm;
    }());
    var UpdateFormDirty = /** @class */ (function () {
        function UpdateFormDirty(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormDirty, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Dirty';
            },
            enumerable: false,
            configurable: true
        });
        return UpdateFormDirty;
    }());
    var SetFormDirty = /** @class */ (function () {
        function SetFormDirty(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormDirty, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Dirty';
            },
            enumerable: false,
            configurable: true
        });
        return SetFormDirty;
    }());
    var SetFormPristine = /** @class */ (function () {
        function SetFormPristine(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormPristine, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Pristine';
            },
            enumerable: false,
            configurable: true
        });
        return SetFormPristine;
    }());
    var UpdateFormErrors = /** @class */ (function () {
        function UpdateFormErrors(payload) {
            this.payload = payload;
        }
        Object.defineProperty(UpdateFormErrors, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Update Form Errors';
            },
            enumerable: false,
            configurable: true
        });
        return UpdateFormErrors;
    }());
    var SetFormDisabled = /** @class */ (function () {
        function SetFormDisabled(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormDisabled, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Disabled';
            },
            enumerable: false,
            configurable: true
        });
        return SetFormDisabled;
    }());
    var SetFormEnabled = /** @class */ (function () {
        function SetFormEnabled(payload) {
            this.payload = payload;
        }
        Object.defineProperty(SetFormEnabled, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Set Form Enabled';
            },
            enumerable: false,
            configurable: true
        });
        return SetFormEnabled;
    }());
    var ResetForm = /** @class */ (function () {
        function ResetForm(payload) {
            this.payload = payload;
        }
        Object.defineProperty(ResetForm, "type", {
            get: function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Forms] Reset Form';
            },
            enumerable: false,
            configurable: true
        });
        return ResetForm;
    }());

    var NgxsFormPlugin = /** @class */ (function () {
        function NgxsFormPlugin() {
        }
        NgxsFormPlugin.prototype.handle = function (state, event, next) {
            var type = i1.getActionTypeFromInstance(event);
            var nextState = state;
            if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
                var value = event.payload.value;
                var payloadValue = Array.isArray(value)
                    ? value.slice()
                    : isObjectLike(value)
                        ? Object.assign({}, value) : value;
                var path = this.joinPathWithPropertyPath(event);
                nextState = i1.setValue(nextState, path, payloadValue);
            }
            if (type === ResetForm.type) {
                var model = i1.getValue(nextState, event.payload.path + ".model");
                nextState = i1.setValue(nextState, "" + event.payload.path, { model: model });
            }
            if (type === UpdateFormStatus.type || type === UpdateForm.type) {
                nextState = i1.setValue(nextState, event.payload.path + ".status", event.payload.status);
            }
            if (type === UpdateFormErrors.type || type === UpdateForm.type) {
                nextState = i1.setValue(nextState, event.payload.path + ".errors", Object.assign({}, event.payload.errors));
            }
            if (type === UpdateFormDirty.type || type === UpdateForm.type) {
                nextState = i1.setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
            }
            if (type === SetFormDirty.type) {
                nextState = i1.setValue(nextState, event.payload + ".dirty", true);
            }
            if (type === SetFormPristine.type) {
                nextState = i1.setValue(nextState, event.payload + ".dirty", false);
            }
            if (type === SetFormDisabled.type) {
                nextState = i1.setValue(nextState, event.payload + ".disabled", true);
            }
            if (type === SetFormEnabled.type) {
                nextState = i1.setValue(nextState, event.payload + ".disabled", false);
            }
            return next(nextState, event);
        };
        NgxsFormPlugin.prototype.joinPathWithPropertyPath = function (_a) {
            var payload = _a.payload;
            var path = payload.path + ".model";
            if (payload.propertyPath) {
                path += "." + payload.propertyPath;
            }
            return path;
        };
        return NgxsFormPlugin;
    }());
    /** @nocollapse */ NgxsFormPlugin.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPlugin, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NgxsFormPlugin.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPlugin });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPlugin, decorators: [{
                type: i0.Injectable
            }] });
    function isObjectLike(target) {
        return target !== null && typeof target === 'object';
    }

    var FormDirective = /** @class */ (function () {
        function FormDirective(_actions$, _store, _formGroupDirective, _cd) {
            this._actions$ = _actions$;
            this._store = _store;
            this._formGroupDirective = _formGroupDirective;
            this._cd = _cd;
            this.path = null;
            this._debounce = 100;
            this._clearDestroy = false;
            this._updating = false;
            this._destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(FormDirective.prototype, "debounce", {
            get: function () {
                return this._debounce;
            },
            set: function (debounce) {
                this._debounce = Number(debounce);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormDirective.prototype, "clearDestroy", {
            get: function () {
                return this._clearDestroy;
            },
            set: function (val) {
                this._clearDestroy = val != null && "" + val !== 'false';
            },
            enumerable: false,
            configurable: true
        });
        FormDirective.prototype.ngOnInit = function () {
            var _this = this;
            this._actions$
                .pipe(i1.ofActionDispatched(ResetForm), operators.filter(function (action) { return action.payload.path === _this.path; }), operators.takeUntil(this._destroy$))
                .subscribe(function (_a) {
                var value = _a.payload.value;
                _this.form.reset(value);
                _this.updateFormStateWithRawValue(true);
                _this._cd.markForCheck();
            });
            this.getStateStream(this.path + ".model").subscribe(function (model) {
                if (_this._updating || !model) {
                    return;
                }
                _this.form.patchValue(model);
                _this._cd.markForCheck();
            });
            this.getStateStream(this.path + ".dirty").subscribe(function (dirty) {
                if (_this.form.dirty === dirty || typeof dirty !== 'boolean') {
                    return;
                }
                if (dirty) {
                    _this.form.markAsDirty();
                }
                else {
                    _this.form.markAsPristine();
                }
                _this._cd.markForCheck();
            });
            // On first state change, sync form model, status and dirty with state
            this._store
                .selectOnce(function (state) { return i1.getValue(state, _this.path); })
                .subscribe(function () {
                _this._store.dispatch([
                    new UpdateFormValue({
                        path: _this.path,
                        value: _this.form.getRawValue()
                    }),
                    new UpdateFormStatus({
                        path: _this.path,
                        status: _this.form.status
                    }),
                    new UpdateFormDirty({
                        path: _this.path,
                        dirty: _this.form.dirty
                    })
                ]);
            });
            this.getStateStream(this.path + ".disabled").subscribe(function (disabled) {
                if (_this.form.disabled === disabled || typeof disabled !== 'boolean') {
                    return;
                }
                if (disabled) {
                    _this.form.disable();
                }
                else {
                    _this.form.enable();
                }
                _this._cd.markForCheck();
            });
            this._formGroupDirective
                .valueChanges.pipe(operators.distinctUntilChanged(function (a, b) { return JSON.stringify(a) === JSON.stringify(b); }), this.debounceChange())
                .subscribe(function () {
                _this.updateFormStateWithRawValue();
            });
            this._formGroupDirective
                .statusChanges.pipe(operators.distinctUntilChanged(), this.debounceChange())
                .subscribe(function (status) {
                _this._store.dispatch(new UpdateFormStatus({
                    status: status,
                    path: _this.path
                }));
            });
        };
        FormDirective.prototype.updateFormStateWithRawValue = function (withFormStatus) {
            var _this = this;
            if (this._updating)
                return;
            var value = this._formGroupDirective.control.getRawValue();
            var actions = [
                new UpdateFormValue({
                    path: this.path,
                    value: value
                }),
                new UpdateFormDirty({
                    path: this.path,
                    dirty: this._formGroupDirective.dirty
                }),
                new UpdateFormErrors({
                    path: this.path,
                    errors: this._formGroupDirective.errors
                })
            ];
            if (withFormStatus) {
                actions.push(new UpdateFormStatus({
                    path: this.path,
                    status: this._formGroupDirective.status
                }));
            }
            this._updating = true;
            this._store.dispatch(actions).subscribe({
                error: function () { return (_this._updating = false); },
                complete: function () { return (_this._updating = false); }
            });
        };
        FormDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            if (this.clearDestroy) {
                this._store.dispatch(new UpdateForm({
                    path: this.path,
                    value: null,
                    dirty: null,
                    status: null,
                    errors: null
                }));
            }
        };
        FormDirective.prototype.debounceChange = function () {
            var _this = this;
            var skipDebounceTime = this._formGroupDirective.control.updateOn !== 'change' || this._debounce < 0;
            return skipDebounceTime
                ? function (change) { return change.pipe(operators.takeUntil(_this._destroy$)); }
                : function (change) { return change.pipe(operators.debounceTime(_this._debounce), operators.takeUntil(_this._destroy$)); };
        };
        Object.defineProperty(FormDirective.prototype, "form", {
            get: function () {
                return this._formGroupDirective.form;
            },
            enumerable: false,
            configurable: true
        });
        FormDirective.prototype.getStateStream = function (path) {
            return this._store.select(function (state) { return i1.getValue(state, path); }).pipe(operators.takeUntil(this._destroy$));
        };
        return FormDirective;
    }());
    /** @nocollapse */ FormDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FormDirective, deps: [{ token: i1__namespace.Actions }, { token: i1__namespace.Store }, { token: i2__namespace.FormGroupDirective }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ FormDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: FormDirective, selector: "[ngxsForm]", inputs: { path: ["ngxsForm", "path"], debounce: ["ngxsFormDebounce", "debounce"], clearDestroy: ["ngxsFormClearOnDestroy", "clearDestroy"] }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FormDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[ngxsForm]' }]
            }], ctorParameters: function () { return [{ type: i1__namespace.Actions }, { type: i1__namespace.Store }, { type: i2__namespace.FormGroupDirective }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { path: [{
                    type: i0.Input,
                    args: ['ngxsForm']
                }], debounce: [{
                    type: i0.Input,
                    args: ['ngxsFormDebounce']
                }], clearDestroy: [{
                    type: i0.Input,
                    args: ['ngxsFormClearOnDestroy']
                }] } });

    var NgxsFormPluginModule = /** @class */ (function () {
        function NgxsFormPluginModule() {
        }
        NgxsFormPluginModule.forRoot = function () {
            return {
                ngModule: NgxsFormPluginModule,
                providers: [
                    {
                        provide: i1.NGXS_PLUGINS,
                        useClass: NgxsFormPlugin,
                        multi: true
                    }
                ]
            };
        };
        return NgxsFormPluginModule;
    }());
    /** @nocollapse */ NgxsFormPluginModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPluginModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NgxsFormPluginModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPluginModule, declarations: [FormDirective], imports: [i2.ReactiveFormsModule], exports: [FormDirective] });
    /** @nocollapse */ NgxsFormPluginModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPluginModule, imports: [[i2.ReactiveFormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsFormPluginModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.ReactiveFormsModule],
                        declarations: [FormDirective],
                        exports: [FormDirective]
                    }]
            }] });

    /**
     * The public api for consumers of @ngxs/form-plugin
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxsFormPlugin = NgxsFormPlugin;
    exports.NgxsFormPluginModule = NgxsFormPluginModule;
    exports.ResetForm = ResetForm;
    exports.SetFormDirty = SetFormDirty;
    exports.SetFormDisabled = SetFormDisabled;
    exports.SetFormEnabled = SetFormEnabled;
    exports.SetFormPristine = SetFormPristine;
    exports.UpdateForm = UpdateForm;
    exports.UpdateFormDirty = UpdateFormDirty;
    exports.UpdateFormErrors = UpdateFormErrors;
    exports.UpdateFormStatus = UpdateFormStatus;
    exports.UpdateFormValue = UpdateFormValue;
    exports["ɵFormDirective"] = FormDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-form-plugin.umd.js.map
