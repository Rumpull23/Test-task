import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetForm, SetFormDirty, SetFormDisabled, SetFormEnabled, SetFormPristine, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
import * as i0 from "@angular/core";
export class NgxsFormPlugin {
    handle(state, event, next) {
        const type = getActionTypeFromInstance(event);
        let nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
            const { value } = event.payload;
            const payloadValue = Array.isArray(value)
                ? value.slice()
                : isObjectLike(value)
                    ? Object.assign({}, value) : value;
            const path = this.joinPathWithPropertyPath(event);
            nextState = setValue(nextState, path, payloadValue);
        }
        if (type === ResetForm.type) {
            const model = getValue(nextState, `${event.payload.path}.model`);
            nextState = setValue(nextState, `${event.payload.path}`, { model: model });
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.errors`, Object.assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, false);
        }
        return next(nextState, event);
    }
    joinPathWithPropertyPath({ payload }) {
        let path = `${payload.path}.model`;
        if (payload.propertyPath) {
            path += `.${payload.propertyPath}`;
        }
        return path;
    }
}
/** @nocollapse */ NgxsFormPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsFormPlugin, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ NgxsFormPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsFormPlugin });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsFormPlugin, decorators: [{
            type: Injectable
        }] });
function isObjectLike(target) {
    return target !== null && typeof target === 'object';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5wbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9mb3JtLXBsdWdpbi9zcmMvZm9ybS5wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLFFBQVEsRUFHUixRQUFRLEVBQ1QsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osZUFBZSxFQUNmLGNBQWMsRUFDZCxlQUFlLEVBQ2YsVUFBVSxFQUNWLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDaEIsTUFBTSxXQUFXLENBQUM7O0FBR25CLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLE1BQU0sQ0FBQyxLQUFVLEVBQUUsS0FBVSxFQUFFLElBQXNCO1FBQ25ELE1BQU0sSUFBSSxHQUFHLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztRQUV0QixJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ3hGLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ2hDLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDZixDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztvQkFDckIsQ0FBQyxtQkFBTSxLQUFLLEVBQ1osQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNWLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENB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ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UsXG4gIGdldFZhbHVlLFxuICBOZ3hzTmV4dFBsdWdpbkZuLFxuICBOZ3hzUGx1Z2luLFxuICBzZXRWYWx1ZVxufSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQge1xuICBSZXNldEZvcm0sXG4gIFNldEZvcm1EaXJ0eSxcbiAgU2V0Rm9ybURpc2FibGVkLFxuICBTZXRGb3JtRW5hYmxlZCxcbiAgU2V0Rm9ybVByaXN0aW5lLFxuICBVcGRhdGVGb3JtLFxuICBVcGRhdGVGb3JtRGlydHksXG4gIFVwZGF0ZUZvcm1FcnJvcnMsXG4gIFVwZGF0ZUZvcm1TdGF0dXMsXG4gIFVwZGF0ZUZvcm1WYWx1ZVxufSBmcm9tICcuL2FjdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4c0Zvcm1QbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcbiAgaGFuZGxlKHN0YXRlOiBhbnksIGV2ZW50OiBhbnksIG5leHQ6IE5neHNOZXh0UGx1Z2luRm4pIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShldmVudCk7XG5cbiAgICBsZXQgbmV4dFN0YXRlID0gc3RhdGU7XG5cbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybVZhbHVlLnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlIHx8IHR5cGUgPT09IFJlc2V0Rm9ybS50eXBlKSB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC5wYXlsb2FkO1xuICAgICAgY29uc3QgcGF5bG9hZFZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgPyB2YWx1ZS5zbGljZSgpXG4gICAgICAgIDogaXNPYmplY3RMaWtlKHZhbHVlKVxuICAgICAgICA/IHsgLi4udmFsdWUgfVxuICAgICAgICA6IHZhbHVlO1xuICAgICAgY29uc3QgcGF0aCA9IHRoaXMuam9pblBhdGhXaXRoUHJvcGVydHlQYXRoKGV2ZW50KTtcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgcGF0aCwgcGF5bG9hZFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gUmVzZXRGb3JtLnR5cGUpIHtcbiAgICAgIGNvbnN0IG1vZGVsID0gZ2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9Lm1vZGVsYCk7XG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH1gLCB7IG1vZGVsOiBtb2RlbCB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybVN0YXR1cy50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSkge1xuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LnN0YXR1c2AsIGV2ZW50LnBheWxvYWQuc3RhdHVzKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybUVycm9ycy50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSkge1xuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LmVycm9yc2AsIHtcbiAgICAgICAgLi4uZXZlbnQucGF5bG9hZC5lcnJvcnNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtRGlydHkudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUpIHtcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5kaXJ0eWAsIGV2ZW50LnBheWxvYWQuZGlydHkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtRGlydHkudHlwZSkge1xuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXJ0eWAsIHRydWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtUHJpc3RpbmUudHlwZSkge1xuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXJ0eWAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybURpc2FibGVkLnR5cGUpIHtcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlzYWJsZWRgLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybUVuYWJsZWQudHlwZSkge1xuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXNhYmxlZGAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dChuZXh0U3RhdGUsIGV2ZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgam9pblBhdGhXaXRoUHJvcGVydHlQYXRoKHsgcGF5bG9hZCB9OiBVcGRhdGVGb3JtVmFsdWUpOiBzdHJpbmcge1xuICAgIGxldCBwYXRoID0gYCR7cGF5bG9hZC5wYXRofS5tb2RlbGA7XG5cbiAgICBpZiAocGF5bG9hZC5wcm9wZXJ0eVBhdGgpIHtcbiAgICAgIHBhdGggKz0gYC4ke3BheWxvYWQucHJvcGVydHlQYXRofWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHRhcmdldDogdW5rbm93bik6IHRhcmdldCBpcyBvYmplY3Qge1xuICByZXR1cm4gdGFyZ2V0ICE9PSBudWxsICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnO1xufVxuIl19