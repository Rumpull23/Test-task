export class UpdateFormStatus {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Status';
    }
}
export class UpdateFormValue {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Value';
    }
}
export class UpdateForm {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form';
    }
}
export class UpdateFormDirty {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Dirty';
    }
}
export class SetFormDirty {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Dirty';
    }
}
export class SetFormPristine {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Pristine';
    }
}
export class UpdateFormErrors {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Update Form Errors';
    }
}
export class SetFormDisabled {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Disabled';
    }
}
export class SetFormEnabled {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Set Form Enabled';
    }
}
export class ResetForm {
    constructor(payload) {
        this.payload = payload;
    }
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Forms] Reset Form';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL2Zvcm0tcGx1Z2luL3NyYy9hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxnQkFBZ0I7SUFLM0IsWUFDUyxPQUdOO1FBSE0sWUFBTyxHQUFQLE9BQU8sQ0FHYjtJQUNBLENBQUM7SUFUSixNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7Q0FPRjtBQUVELE1BQU0sT0FBTyxlQUFlO0lBSzFCLFlBQW1CLE9BQTREO1FBQTVELFlBQU8sR0FBUCxPQUFPLENBQXFEO0lBQUcsQ0FBQztJQUpuRixNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDJCQUEyQixDQUFDO0lBQ3JDLENBQUM7Q0FFRjtBQUVELE1BQU0sT0FBTyxVQUFVO0lBS3JCLFlBQ1MsT0FNTjtRQU5NLFlBQU8sR0FBUCxPQUFPLENBTWI7SUFDQSxDQUFDO0lBWkosTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyxxQkFBcUIsQ0FBQztJQUMvQixDQUFDO0NBVUY7QUFFRCxNQUFNLE9BQU8sZUFBZTtJQUsxQixZQUFtQixPQUFnRDtRQUFoRCxZQUFPLEdBQVAsT0FBTyxDQUF5QztJQUFHLENBQUM7SUFKdkUsTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTywyQkFBMkIsQ0FBQztJQUNyQyxDQUFDO0NBRUY7QUFFRCxNQUFNLE9BQU8sWUFBWTtJQUt2QixZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7SUFKdEMsTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyx3QkFBd0IsQ0FBQztJQUNsQyxDQUFDO0NBRUY7QUFFRCxNQUFNLE9BQU8sZUFBZTtJQUsxQixZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7SUFKdEMsTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTywyQkFBMkIsQ0FBQztJQUNyQyxDQUFDO0NBRUY7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBSzNCLFlBQW1CLE9BQWlFO1FBQWpFLFlBQU8sR0FBUCxPQUFPLENBQTBEO0lBQUcsQ0FBQztJQUp4RixNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7Q0FFRjtBQUVELE1BQU0sT0FBTyxlQUFlO0lBSzFCLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQUcsQ0FBQztJQUp0QyxNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDJCQUEyQixDQUFDO0lBQ3JDLENBQUM7Q0FFRjtBQUVELE1BQU0sT0FBTyxjQUFjO0lBS3pCLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQUcsQ0FBQztJQUp0QyxNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLDBCQUEwQixDQUFDO0lBQ3BDLENBQUM7Q0FFRjtBQUVELE1BQU0sT0FBTyxTQUFTO0lBS3BCLFlBQW1CLE9BQXNDO1FBQXRDLFlBQU8sR0FBUCxPQUFPLENBQStCO0lBQUcsQ0FBQztJQUo3RCxNQUFNLEtBQUssSUFBSTtRQUNiLHNJQUFzSTtRQUN0SSxPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtU3RhdHVzIHtcbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XG4gICAgcmV0dXJuICdbRm9ybXNdIFVwZGF0ZSBGb3JtIFN0YXR1cyc7XG4gIH1cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHN0YXR1czogc3RyaW5nIHwgbnVsbDtcbiAgICAgIHBhdGg6IHN0cmluZztcbiAgICB9XG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZUZvcm1WYWx1ZSB7XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxuICAgIHJldHVybiAnW0Zvcm1zXSBVcGRhdGUgRm9ybSBWYWx1ZSc7XG4gIH1cbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdmFsdWU6IGFueTsgcGF0aDogc3RyaW5nOyBwcm9wZXJ0eVBhdGg/OiBzdHJpbmcgfSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZUZvcm0ge1xuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcbiAgICByZXR1cm4gJ1tGb3Jtc10gVXBkYXRlIEZvcm0nO1xuICB9XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB2YWx1ZTogYW55O1xuICAgICAgZXJyb3JzOiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSB8IG51bGw7XG4gICAgICBkaXJ0eTogYm9vbGVhbiB8IG51bGw7XG4gICAgICBzdGF0dXM6IHN0cmluZyB8IG51bGw7XG4gICAgICBwYXRoOiBzdHJpbmc7XG4gICAgfVxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtRGlydHkge1xuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcbiAgICByZXR1cm4gJ1tGb3Jtc10gVXBkYXRlIEZvcm0gRGlydHknO1xuICB9XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IGRpcnR5OiBib29sZWFuIHwgbnVsbDsgcGF0aDogc3RyaW5nIH0pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRGb3JtRGlydHkge1xuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcbiAgICByZXR1cm4gJ1tGb3Jtc10gU2V0IEZvcm0gRGlydHknO1xuICB9XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRGb3JtUHJpc3RpbmUge1xuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcbiAgICByZXR1cm4gJ1tGb3Jtc10gU2V0IEZvcm0gUHJpc3RpbmUnO1xuICB9XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVGb3JtRXJyb3JzIHtcbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XG4gICAgcmV0dXJuICdbRm9ybXNdIFVwZGF0ZSBGb3JtIEVycm9ycyc7XG4gIH1cbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgZXJyb3JzOiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSB8IG51bGw7IHBhdGg6IHN0cmluZyB9KSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2V0Rm9ybURpc2FibGVkIHtcbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XG4gICAgcmV0dXJuICdbRm9ybXNdIFNldCBGb3JtIERpc2FibGVkJztcbiAgfVxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2V0Rm9ybUVuYWJsZWQge1xuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcbiAgICByZXR1cm4gJ1tGb3Jtc10gU2V0IEZvcm0gRW5hYmxlZCc7XG4gIH1cbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykge31cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0Rm9ybSB7XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxuICAgIHJldHVybiAnW0Zvcm1zXSBSZXNldCBGb3JtJztcbiAgfVxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBwYXRoOiBzdHJpbmc7IHZhbHVlPzogYW55IH0pIHt9XG59XG4iXX0=